name: Build

on:
  push:
    tags:
      - '*'
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  PYTHON_VER: "3.11.9"
  NAME: "BlackboardSync"
  PRE_RELEASE: ${{ contains(github.ref_name, '-') }}

permissions:
  contents: write

jobs:
  test:
    uses: ./.github/workflows/pytest.yml
    with:
      python-version: "3.10"

  version:
    needs: [ test ]
    runs-on: ubuntu-latest
    outputs:
      code: ${{ steps.version-check.outputs.code }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-tags: true
      - uses: actions/setup-python@v5
      - run: |
          pip install --upgrade setuptools
          pip install setuptools-scm
      - id: version-check
        run: echo "code=$(python -m setuptools_scm)" >> "$GITHUB_OUTPUT"

  release-notes:
    needs: [ test ]
    runs-on: ubuntu-latest
    outputs:
      body: ${{ steps.extract-release-notes.outputs.release_notes }}
    steps:
      - uses: actions/checkout@v4
      - id: extract-release-notes
        uses: ffurrer2/extract-release-notes@v1
        with:
          prerelease: ${{ env.PRE_RELEASE }}

  pypi:
    needs: [ test ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VER }}
      - uses: sanjacob/pipenv-requirements@v1
        with:
          from-pipfile: true
          dev: true
      - run: python -m build
      - name: Deploy to PyPI
        if: startsWith(github.ref, 'refs/tags/')
        env:
          TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
        run: twine upload dist/*

  pyinstaller:
    needs: [ test ]
    uses: ./.github/workflows/pyinstaller.yml
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest]
    with:
      python-version: "3.11.9"
      runs-on: ${{ matrix.os }}

  package-windows:
    needs: [ pyinstaller, version ]
    runs-on: windows-latest
    env:
      WIN_SCRIPT: "packaging/windows/pkg_win.nsi"
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: build-windows-latest
          path: ./dist
      - run: ls
      - run: ls ./dist
      - env:
          OUTPUT1: ${{ needs.version.outputs.code }}
        run: echo $env:OUTPUT1

      #- name: Create windows installer
      # uses: joncloud/makensis-action@v4
      # with:
      #   script-file: ${{ env.WIN_SCRIPT }}
      #   arguments: "/V3 /DVERSION=${{github.ref_name}}"

          #- uses: actions/upload-artifact@v4
          #with:
          #name: ${{ format('{0}-{1}.exe', env.NAME, github.ref_name) }}
          #path: dist/*.exe

  package-macos:
    needs: [ pyinstaller, version ]
    runs-on: macos-latest
    env:
      MAC_SCRIPT: "packaging/macos/pkg_macos.sh"
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: build-macos-latest
          path: ./dist/BBSync.app

      - run: ls ./dist

      - name: Import signing certificate
        uses: apple-actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.BB_P12 }}
          p12-password: ${{ secrets.BB_P12_PASSWORD }}

      - env:
          OUTPUT1: ${{ needs.version.outputs.code }}
        run: echo "$OUTPUT1"

          #      - name: Sign and Package into DMG
          #run: |
          #chmod +x $MAC_SCRIPT
          #$MAC_SCRIPT "blackboard_sync-$GITHUB_REF_NAME"

          #- uses: actions/upload-artifact@v4
          #with:
          #name: ${{ format('{0}.dmg', env.NAME) }}
          #path: dist/*.dmg
  
          # gh-release:
          # if: startsWith(github.ref, 'refs/tags/')
          # needs: [ package-windows, package-macos, release-notes ]
          #runs-on: ubuntu-latest
          # steps:
          # - uses: actions/download-artifact@v4
          #  with:
          #  name: 
          #      path: ./dist/BlackboardSync.exe
          #   - uses: actions/download-artifact@v4
          #    with:
          #   name: 
          #   path: ./dist/BlackboardSync.dmg
#     - uses: softprops/action-gh-release@v1
#       with:
#         body: ${{ needs.release-notes.outputs.body }}
#         prerelease: ${{ env.PRE_RELEASE }}
#         files: |
#           dist/*.exe
#           dist/*.dmg


